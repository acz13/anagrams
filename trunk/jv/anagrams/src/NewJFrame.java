import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.Hashtable;
import javax.swing.Timer;
import javax.swing.SwingWorker;
import javax.swing.UnsupportedLookAndFeelException;
/*
 * NewJFrame.java
 *
 * Created on April 5, 2007, 5:52 PM
 */

/**
 *
 * @author  Eric
 */
public class NewJFrame extends javax.swing.JFrame
        implements PropertyChangeListener {
    /**
     *
     */
    Timer clock_updater;
    private class anworklistener implements PropertyChangeListener {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if ("progress" == evt.getPropertyName()) {
                jProgressBar1.setValue((Integer) evt.getNewValue());
                
            } else if ("state" == evt.getPropertyName()){
                SwingWorker.StateValue s = (SwingWorker.StateValue)evt.getNewValue();
                if (s == SwingWorker.StateValue.DONE) {
                    jLabel1.setText("");
                    jTextField1.setEnabled(true);
                    jTextField1.requestFocusInWindow();
                    clock_updater.stop();
                }
            }
        }
    }
    private static final long serialVersionUID = 1L;
    /** Creates new form NewJFrame */
    public NewJFrame() {
        try {
            javax.swing.UIManager.setLookAndFeel(
                    javax.swing.UIManager.getSystemLookAndFeelClassName());
            initComponents();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        elapsed_time = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFocusable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jScrollPane2.setFocusable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jTextArea1.setFocusable(false);
        jScrollPane2.setViewportView(jTextArea1);

        jTextField1.setEnabled(false);
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        elapsed_time.setText("00:00:00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(elapsed_time))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(elapsed_time)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    private AnagrammerWorker arw;
    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        if (evt.VK_ENTER == evt.getKeyChar()) {
            jTextArea1.selectAll();
            jTextArea1.replaceSelection("");
            arw = new AnagrammerWorker(jTextField1.getText(),
                    jTextArea1,
                    drw.rv);
            anworklistener anwl = new anworklistener();
            arw.addPropertyChangeListener(anwl);
            jTextField1.setEnabled(false);
            elapsed_time.setText("00:00:00");

            clock_updater = new Timer(1000, new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    Date now = new Date();
                    // it's hard to believe I have to do this myself, and yet I cannot find anything in the Java
                    // runtime that will do it for me.
                    long total_seconds = (now.getTime() - arw.time_started.getTime()) / 1000;
                    long displayed_seconds = total_seconds % 60;
                    long displayed_minutes = ((total_seconds - displayed_seconds) / 60) % 60;
                    long displayed_hours = (total_seconds - displayed_minutes * 60) / 3600;
                    
                    elapsed_time.setText(String.format("%02d:%02d:%02d", displayed_hours, displayed_minutes, displayed_seconds));
                }
            });
            clock_updater.start();
            arw.execute();
        }
    }//GEN-LAST:event_jTextField1KeyTyped
    
    public static Hashtable<Bag, ArrayList<String>> ht;
    private DictionaryReaderWorker drw;
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jProgressBar1.setMinimum(0);
        ht = new Hashtable<Bag, ArrayList<String>>();
        drw = new DictionaryReaderWorker();
        drw.addPropertyChangeListener(this);
        jLabel1.setText("Munging dictionary ...");
        drw.execute();
    }//GEN-LAST:event_formWindowOpened
    @Override
    public void propertyChange(PropertyChangeEvent evt){
        
        if ("progress" == evt.getPropertyName()) {
            jProgressBar1.setValue((Integer) evt.getNewValue());
        } else if ("state" == evt.getPropertyName()){
            SwingWorker.StateValue s = (SwingWorker.StateValue)evt.getNewValue();
            if (s == SwingWorker.StateValue.DONE) {
                jLabel1.setText("");
                jTextField1.setEnabled(true);
                
                jTextField1.requestFocusInWindow();
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel elapsed_time;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    
}
