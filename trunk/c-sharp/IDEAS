-*-text-*-
Stuff I might want to do:

* Make it easy to interrupt.  (Perhaps by writing it in a
  multi-threaded way.)  The way it is now, if I wanted to write code
  that allows me to interrupt it, I could have an "interrupt" button
  that clears a global flag named something like "ok_to_run", but then
  each loop would have to check that variable's value, which is ugly.
  In a perfect world, the loops would run in a separate thread, and
  the button would simply kill that thread.

  Another idea might be to use Iterators.  Not sure what they are,
  exactly, but they might let me structure the anagrams function as a
  loop that calls "yield", so that each time I call the function, I
  get one more anagram.  That would probably make it easy to
  interrupt: just stop calling it :-)

* See if C# has something like this nifty feature in Delphi: you can
  write a function that enables a control based on the states of other
  controls, and have the system call your function "in the
  background", when nothing is happening.  Thus you can keep all the
  code for enabling that control in one place, rather than scattered
  throughout the program.

  The documentation has a broken link for something called
  "Event-based Asynchronous Pattern" that might be this.

  Java's "Swing" GUI thingy seems to have something called "Actions"
  that is like this:
  http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html

* Sorting ideas:

** Bigger words first.

** Fewest words first.

** Recover a previous sort.  For example, in r14, the initial sort
   order is ... I don't know what; probably biggest-word-first.  Then
   when you click the column header, you get alphabetical sorting.
   But if you change you mind and want biggest-word-first back, you
   can't get it without recomputing all the anagrams.

   I would expect this would require that I store a "sort index" in
   the list view, along with each actual string.

* Make Control-A do its thing no matter where the focus is in the form
  -- currently it works only if the input box has the focus.

* Precompile the dictionary so we don't have to wait at startup
---
done:

* Investigate the ListView.BeginUpdate method for adding listview
  items; it might speed that operation up.  

It doesn't seem to, but simply avoiding Application.DoEvents seems to
work fine.
